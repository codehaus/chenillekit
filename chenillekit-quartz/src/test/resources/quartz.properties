#
# Apache License
# Version 2.0, January 2004
# http://www.apache.org/licenses/
#
# Copyright 2008-2010 by chenillekit.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#

#============================================================================
# Configure Scheduler Properties
#============================================================================

# Can be any string, and the value has no meaning to the scheduler itself -
# but rather serves as a mechanism for client code to distinguish schedulers when multiple instances
# are used within the same program. If you are using the clustering features, you must use the same
# name for every instance in the cluster that is 'logically' the same Scheduler.
org.quartz.scheduler.instanceName = ChenilleKitScheduler

# Can be any string, but must be unique for all schedulers working as if they are the same 'logical' Scheduler within a cluster.
# You may use the value "AUTO" as the instanceId if you wish the Id to be generated for you.
org.quartz.scheduler.instanceId = AUTO

# Only used if org.quartz.scheduler.instanceId is set to "AUTO".
# Defaults to "org.quartz.simpl.SimpleInstanceIdGenerator", which generates an instance id based upon host name and time stamp.
#
# org.quartz.scheduler.instanceIdGenerator.class = org.quartz.simpl.SimpleInstanceIdGenerator

# Can be any String that is a valid name for a java thread.
# If this property is not specified, the thread will receive the scheduler's name ("org.quartz.scheduler.instanceName") plus
# an the appended string '_QuartzSchedulerThread'.
#
# org.quartz.scheduler.threadName

# A boolean value ('true' or 'false') that specifies whether the main thread of the scheduler should be a daemon thread or not.
# See also the org.quartz.scheduler.makeSchedulerThreadDaemon property for tuning the SimpleThreadPool if that is the thread pool
# implementation you are using (which is most likely the case).
#
# org.quartz.scheduler.makeSchedulerThreadDaemon = org.quartz.simpl.SimpleThreadPool

# A boolean value ('true' or 'false') that specifies whether the threads spawned by Quartz will inherit the context ClassLoader of
# the initializing thread (thread that initializes the Quartz instance). This will affect Quartz main scheduling thread,
# JDBCJobStore's misfire handling thread (if JDBCJobStore is used), cluster recovery thread (if clustering is used), and threads
# in SimpleThreadPool (if SimpleThreadPool is used).
# Setting this value to 'true' may help with class loading, JNDI look-ups, and other issues related to using Quartz within an
# application server.
#
# org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer

# Is the amount of time in milliseconds that the scheduler will wait before re-queries for available triggers when the scheduler
# is otherwise idle. Normally you should not have to 'tune' this parameter, unless you're using XA transactions, and are having
# problems with delayed firings of triggers that should fire immediately.
#
# org.quartz.scheduler.idleWaitTime

# Is the amount of time in milliseconds that the scheduler will wait between re-tries when it has detected a loss of connectivity
# within the JobStore (e.g. to the database). This parameter is obviously not very meaningful when using RamJobStore.
#
# org.quartz.scheduler.dbFailureRetryInterval

# Defaults to the most robust approach, which is to use the "org.quartz.simpl.CascadingClassLoadHelper" class -
# which in turn uses every other ClassLoadHelper class until one works. You should probably not find the need to specify any
# other class for this property, though strange things seem to happen within application servers.
# All of the current possible ClassLoadHelper implementation can be found in the org.quartz.simpl package.
#
# org.quartz.scheduler.classLoadHelper.class

# The class name of the JobFactory to use. The default is 'org.quartz.simpl.SimpleJobFactory', you may like to try
# 'org.quartz.simpl.PropertySettingJobFactory'. A JobFatcory is responsible for producing instances of JobClasses. SimpleJobFactory
# simply calls newInstance() on the class. PropertySettingJobFactory does as well, but also reflectively sets the job's bean
# properties using the contents of the JobDataMap.
#
# org.quartz.scheduler.jobFactory.class


# Represent a name-value pair that will be placed into the "scheduler context" as strings. (see Scheduler.getContext()).
# So for example, the setting "org.quartz.context.key.MyKey = MyValue" would perform the equivalent of
# scheduler.getContext().put("MyKey", "MyValue").
#
# !!!! The Transaction-Related properties should be left out of the config file unless you are using JTA transactions. !!!!
#
# org.quartz.context.key.SOME_KEY

# Should be set to the JNDI URL at which Quartz can locate the Application Server's UserTransaction manager.
# The default value (if not specified) is "java:comp/UserTransaction" - which works for almost all Application Servers.
# Websphere users may need to set this property to "jta/usertransaction".
# This is only used if Quartz is configured to use JobStoreCMT, and org.quartz.scheduler.wrapJobExecutionInUserTransaction is set to true.
#
# org.quartz.scheduler.userTransactionURL

# Should be set to "true" if you want Quartz to start a UserTransaction before calling execute on your job.
# The Tx will commit after the job's execute method completes, and after the JobDataMap is updated (if it is a StatefulJob).
# The default value is "false".
#
# org.quartz.scheduler.wrapJobExecutionInUserTransaction

# Whether or not to skip running a quick web request to determine if there is an updated version of Quartz available for download.
# If the check runs, and an update is found, it will be reported as available in Quartz's logs.
#
org.quartz.scheduler.skipUpdateCheck = true

#============================================================================
# Configure ThreadPool
#============================================================================

# Is the name of the ThreadPool implementation you wish to use.
# The threadpool that ships with Quartz is "org.quartz.simpl.SimpleThreadPool", and should meet the needs of nearly every user.
# It has very simple behavior and is very well tested. It provides a fixed-size pool of threads that 'live' the lifetime of the Scheduler.
#
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool

# Can be any positive integer, although you should realize that only numbers between 1 and 100 are very practical.
# This is the number of threads that are available for concurrent execution of jobs.
# If you only have a few jobs that fire a few times a day, then 1 thread is plenty!
# If you have tens of thousands of jobs, with many firing every minute, then you probably want a thread count more like 50 or 100
# (this highly depends on the nature of the work that your jobs perform, and your systems resources!).
#
org.quartz.threadPool.threadCount = 3

# Can be any int between Thread.MIN_PRIORITY (which is 1) and Thread.MAX_PRIORITY (which is 10).
# The default is Thread.NORM_PRIORITY (5).
org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure JobStore
#============================================================================

# The the number of milliseconds the scheduler will 'tolerate' a trigger to pass its next-fire-time by, before being considered "misfired".
# The default value (if you don't make an entry of this property in your configuration) is 60000 (60 seconds).
#
org.quartz.jobStore.misfireThreshold = 60000

# RAMJobStore is used to store scheduling information (job, triggers and calendars) within memory.
# RAMJobStore is fast and lightweight, but all scheduling information is lost when the process terminates.
#
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

#============================================================================
# Configure Plugins
#============================================================================

# The logging trigger history plugin catches trigger events (it is also a trigger listener) and logs then with Jakarta Commons-Logging.
# See the class's JavaDoc for a list of all the possible parameters.
org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingJobHistoryPlugin
