<!--
  ~ Apache License
  ~ Version 2.0, January 2004
  ~ http://www.apache.org/licenses/
  ~
  ~ Copyright 2008 by chenillekit.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  -->

<document>
  <body>

    <p>
      There are many possible parameters for the javascript widgets, that dont considered by default.
      If you need some/all of that please feel free to create your own component that extdends from
      AutoComplete like this:
    </p>

    <section name="extending ... ">
      <source>
        <![CDATA[
public class MyAutoComplete extends AutoComplete
{
  @Override
  protected void configure(JSONObject options)
  {
    options.put("delay", 0.2f);		// Delay before running ajax request
    options.put("highlight", true);	// Highlight search string in list
  }
}
]]>
      </source>
    </section>

    <section name="Examples">

      <p>
        This example describe how to use the AutoComplete component.
      </p>

      <subsection name="MyPage.tml">
        <source>
          <![CDATA[
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
    <body>
    <t:form>
      <input t:id="autoComplete" type="text"/>
      <br/>
      <input type="submit"/>
    </t:form>
    </body>
</html>
]]>
        </source>
      </subsection>

      <subsection name="MyPage.java">
        <source>
          <![CDATA[
public class MyPage
{
  @Property
  @Inject
  private MusicLibrary musicLibrary;

  @Persist
  @Property
  private List<Track> selectedTracks;

	@Component(parameters = {"selected=selectedTracks", "translate=prop:translator", "label=title"})
	private AutoComplete autoComplete;

  /**
   * Tapestry render phase method.
   * Initialize temporary instance variables here.
   */
  void setupRender()
  {
    if (selectedTracks == null)
      selectedTracks = CollectionFactory.newList();
  }

  public List<Track> onProvidecompletionsFromAutoComplete(String partialValue)
  {
    return musicLibrary.findByMatchingTitle(partialValue);
  }

  public FieldTranslator getTranslator()
  {
    return new FieldTranslator<Track>()
    {
      public String toClient(Track value)
      {
        String clientValue = "0";
        if (value != null)
          clientValue = String.valueOf(value.getId());

        return clientValue;
      }

      public void render(MarkupWriter writer) { }

      public Class<Track> getType() { return Track.class; }

      public Track parse(String clientValue) throws ValidationException
      {
        Track serverValue = null;

        if (clientValue != null && clientValue.length() > 0 && !clientValue.equals("0"))
          serverValue = musicLibrary.getById(new Long(clientValue));

        return serverValue;
      }
    };
  }
}
]]>
        </source>
      </subsection>

    </section>
  </body>
</document>