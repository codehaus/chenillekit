<!--
  ~ Apache License
  ~ Version 2.0, January 2004
  ~ http://www.apache.org/licenses/
  ~
  ~ Copyright 2008 by chenillekit.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  -->
<document>
    <body>

        <section name="Simple Example">

            <p>
                Following is the simplest possible use of the editor.
            </p>

            <p>
                <img src="editor_simple.png"/>
            </p>

            <p>
                You can see that it comes out of the box loaded with features... perhaps too many.
                We'll fix that later, but first let's look at how to use it.
            </p>

            <subsection name="MyPage.java">
                <source>
                    <![CDATA[
public class MyPage
{

    @Persist
    @Property
    private String _editorValue;

}
]]>
                </source>

                <p>
                    This is about as simple as it gets. We have created our page class with a
                    persistent property, <code>editorValue</code>, which will be used to store the value
                    accessed by the editor.
                </p>

            </subsection>

            <subsection name="MyPage.tml">
                <source><![CDATA[
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
    <body>

        <h3>Editor</h3>
        <form t:type="form">
            <textarea t:type="ck/editor" value="editorValue"
                width="100%">This would be the textarea's content.</textarea>
            <br/><input t:type="submit"/>
        </form>

        <h3>Content</h3>
        <div style="padding: 5px; border: 1px solid #000;">
            <div t:type="outputraw" value="editorValue">Output.</div>
        </div>

    </body>
</html>
                ]]></source>

                <p>
                    In our template we declare a component of type <code>ck/editor</code>,
                    and we pass it values for the <code>value</code> and <code>width</code> parameters.
                    The important one of course is the <code>value</code> parameter, to which we
                    assign <code>editorValue</code>. The binding prefix for this parameter is <code>prop:</code>,
                    which means that Tapestry will look for this property in the page class. This
                    is the value that will be set when the containing form is submitted, and will also provide
                    the initial value for the editor.
                </p>
                <p>
                    Beneath our editor we created an <code>outputraw</code> component, in which we display the
                    contents of the editor after it has been submitted. The point of this is simply to show
                    that the editor is working much like a normal form field, and also how to correctly
                    display the content received from it. Note that if you do not display the content in
                    an <code>outputraw</code> component, Tapestry will replace the tags with entities so
                    as to not disrupt the page flow.
                </p>

            </subsection>

        </section>

        <section name="Example With an Editor Configuration File">

            <p>
                In this example we show how to provide the editor with a configuration file. External
                configurations are supported by the editor in the form of javascript files. The FCKeditor
                supports a myriad of configuration options, so for comprehensive documentation on them
                refer to the FCKeditor <a href="http://docs.fckeditor.net/FCKeditor_2.x/Developers_Guide">developer's guide</a>.
            </p>

            <subsection name="myeditor.js">
                <source><![CDATA[
FCKConfig.ToolbarSets["MyToolbar"] = [
    ['Bold','Italic']
];
                ]]></source>

                <p>
                    As you can see this is a very simple configuration file in which we create a custom
                    toolbar. We named this toolbar <code>MyToolbar</code>, and can use it by passing this name
                    to the <code>toolbarSet</code> parameter of the editor. For our example we'll save
                    this file in the context root.
                </p>

            </subsection>

            <subsection name="MyPage.tml">
                <source><![CDATA[
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
    <body>

        <h3>Editor</h3>
        <form t:type="form">
            <textarea t:type="ck/editor" t:value="editorValue"
                customConfiguration="asset:context:/myeditor.js" toolbarSet="MyToolbar"
                width="100%">This would be the textarea's content.</textarea>
            <br/><input t:type="submit"/>
        </form>

        <h3>Editor Result</h3>
        <div style="padding: 5px; border: 1px solid #000;">
            <div t:type="outputraw" value="editorValue">Output.</div>
        </div>

    </body>
</html>
                ]]></source>

                <p>
                    This template is the same as the previous one with the addition of two parameters:
                    <code>customConfiguration</code> and <code>toolbarSet</code>. The <code>customConfiguration</code>
                    parameter expects an <a href="http://tapestry.apache.org/tapestry5/apidocs/org/apache/tapestry/Asset.html">Asset</a>,
                    so we pair the <code>asset:</code> and <code>context:</code> binding prefixes to
                    pull our configuration file in from the context as an asset.
                    The <code>toolbarSet</code> parameter accepts a simple string which should be one
                    of the named toolbars. Here we pass it the name of the toolbar that we defined
                    in our custom configuration (<code>MyToolbar</code>).
                </p>

            </subsection>

        </section>

        <section name="Notes">
            <p>
                At its core, the Editor component is just a HTML textarea. Under a supported browser, it is transformed
                into a powerful rich text editor supporting configurable toolbars, templates, text styles, and many
                other advanced features.
            </p>
            <p>
                The Editor component is built on the powerful <a href="http://www.fckeditor.net/">FCKeditor</a>.
                For information on configuring and extending the editor, refer to the <a href="http://docs.fckeditor.net/FCKeditor_2.x/Developers_Guide">developer's guide</a>.
                For information on the features and general usage of teh editor, refer to the <a href="http://docs.fckeditor.net/FCKeditor_2.x/Users_Guide">user's guide</a>.
            </p>

            <subsection name="Ajax">
                Ajax support is not officially supported (yet).
            </subsection>

            <subsection name="External Configurations">
                There is currently an issue with getting external configuration files to load
                properly. This is being worked on.
            </subsection>

        </section>

    </body>
</document>