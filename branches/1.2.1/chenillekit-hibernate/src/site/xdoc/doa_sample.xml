<?xml version="1.0"?>

<!--
  ~ Apache License
  ~ Version 2.0, January 2004
  ~ http://www.apache.org/licenses/
  ~
  ~ Copyright 2008 by chenillekit.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  -->

<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">

<document>

    <properties>
        <title>a big sample how to use DAOs</title>
        <author email="homburgs@gmail.com"/>
    </properties>


    <body>

        <section name="big sample">
            <p>
                i think the simplest way to describe is show it by an example:
            </p>
            <subsection name="your database table 'users' and 'address'">

                <table>
                    <caption>users</caption>
                    <tr>
                        <th width="33%">fieldname</th>
                        <th width="33%">type</th>
                        <th width="33%">description</th>
                    </tr>
                    <tr>
                        <td>id</td>
                        <td>int</td>
                        <td>primary key</td>
                    </tr>
                    <tr>
                        <td>id_address</td>
                        <td>int</td>
                        <td>reference to table 'address'</td>
                    </tr>
                    <tr>
                        <td>login_name</td>
                        <td>char(20)</td>
                        <td>users login name</td>
                    </tr>
                    <tr>
                        <td>password</td>
                        <td>char(8)</td>
                        <td>users password</td>
                    </tr>
                </table>

                <br/>

                <table>
                    <caption>address</caption>
                    <tr>
                        <th width="33%">fieldname</th>
                        <th width="33%">type</th>
                        <th width="33%">description</th>
                    </tr>
                    <tr>
                        <td>id</td>
                        <td>int</td>
                        <td>primary key</td>
                    </tr>
                    <tr>
                        <td>name1</td>
                        <td>varchar(30)</td>
                        <td>name 1</td>
                    </tr>
                    <tr>
                        <td>name2</td>
                        <td>varchar(30)</td>
                        <td>name 2</td>
                    </tr>
                    <tr>
                        <td>street</td>
                        <td>varchar(30)</td>
                        <td>street</td>
                    </tr>
                    <tr>
                        <td>zip</td>
                        <td>char(6)</td>
                        <td>zip code</td>
                    </tr>
                    <tr>
                        <td>city</td>
                        <td>varchar(30)</td>
                        <td>city</td>
                    </tr>
                </table>

            </subsection>

            <subsection name="your entities for table 'users' and 'address'">
                <source>
                    <![CDATA[
@Entity
@Table(name = "users")
public class User
{
    private long id;
    private Address address;
    private String loginName;
    private String password;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", nullable = false, length = 20)
    public long getId()
    {
        return id;
    }

    public void setId(long id)
    {
        this.id = id;
    }

    @Basic
    @Column(name = "login_name", nullable = false, length = 8, unique = true)
    @Validate("required")
    public String getLoginName()
    {
        return loginName;
    }

    public void setLoginName(String loginName)
    {
        this.loginName = loginName;
    }

    @Basic
    @Column(name = "password", length = 32, nullable = false)
    @Validate("required,minlength=4")
    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    @ManyToOne(targetEntity = Address.class)
    @Fetch(value = FetchMode.JOIN)
    @Cascade(value = {org.hibernate.annotations.CascadeType.SAVE_UPDATE,
            org.hibernate.annotations.CascadeType.DELETE_ORPHAN})
    @JoinColumn(name = "id_address", nullable = false)
    public Address getAddress()
    {
        return address;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }
}

@Entity
@Table(name = "address")
public class Address
{
    private long id;
    private String name1;
    private String name2;
    private String street;
    private String zip;
    private String city;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", nullable = false, length = 20)
    public long getId()
    {
        return _id;
    }

    public void setId(long id)
    {
        _id = id;
    }

    @Basic
    @Column(name = "name_1", nullable = false, length = 30)
    @Validate("required")
    public String getName1()
    {
        return name1;
    }

    public void setName1(String name1)
    {
        this.name1 = name1;
    }

    @Basic
    @Column(name = "name_2", nullable = false, length = 30)
    public String getName2()
    {
        return name2;
    }

    public void setName2(String name2)
    {
        this.name2 = name2;
    }

    @Basic
    @Column(name = "street", nullable = false, length = 30)
    public String getStreet()
    {
        return street;
    }

    public void setStreet(String street)
    {
        this.street = street;
    }

    @Basic
    @Column(name = "zip", nullable = false, length = 6)
    public String getZip()
    {
        return zip;
    }

    public void setZip(String zip)
    {
        this.zip = zip;
    }

    @Basic
    @Column(name = "city", nullable = false, length = 30)
    public String getCity()
    {
        return city;
    }

    public void setCity(String city)
    {
        this.city = city;
    }
}
]]>
                </source>

            </subsection>

            <subsection name="your DAO interface for entities User and Address">

                <source>
                    <![CDATA[
public interface UserDAO extends GenericDAO<User, Long>
{
    List<User> findAllOrderedByLoginName();

    List<User> findByPartialName(String partialName);
}

public interface AddressDAO extends GenericDAO<Address, Long>
{
}
]]>
                </source>

            </subsection>

            <subsection name="your hibernate based implementation for UserDAO and AddressDAO">

                <source>
                    <![CDATA[
public class UserDAOHibernate extends AbstractHibernateDAO<User, Long> implements UserDAO
{
    public UserDAOHibernate(Logger logger, Session session)
    {
        super(logger, session);
    }

    public List<User> findAllOrderedByLoginName()
    {
        return findAll("loginName");
    }

    public List<User> findByPartialName(String partialName)
    {
        SQLString sqlString = new SQLString("FROM Users users");

        if (partialName != null && partialName.length() > 0)
            sqlString.addWhereClause("users.address.name1 LIKE '" + partialName + "%'");

        return findByQuery(sqlString.toString());
    }

    @Override
    public void preDoSave(User entity)
    {
       Address address = entity.getAddress();
       if (address.getZip().equals("999999"))
           throw new RuntimeException("Zip-Code cant be '999999'");
    }
}

public class AddressDAOHibernate extends AbstractHibernateDAO<Address, Long> implements AddressDAO
{
    public AddressDAOHibernate(Logger logger, Session session)
    {
        super(logger, session);
    }
}
]]>
                </source>

            </subsection>

            <subsection name="inject the DAO into your application">

                <p>
                    add UserDAOHibernate as service to Tapestry5 IOC and say hibernate, where to find your entities.
                </p>

                <source>
                    <![CDATA[
public static void contributeHibernateEntityPackageManager(Configuration<String> configuration)
{
    configuration.add("your.appl.package.entities");
}

/**
 * bind all used DAOs.
 *
 * @param binder the service binder
 */
public static void bind(ServiceBinder binder)
{
    binder.bind(UserDAO.class, UserDAOHibernate.class);
    binder.bind(AddressDAO.class, AddressDAOHibernate.class);
}
]]>
                </source>

            </subsection>

            <subsection name="accessing the DAO from application code">

                <p>
                    now we are ready to access the user entity by his DAO class.
                </p>

                <source>
                    <![CDATA[
UserDAO userDAO = iocRegistry.getService(UserDAO.class);

User user = new User();
user.setLoginName("username");
user.setPassword("my_secret");
user.setActive(true);

Address address = new Address();
address.setName1("John");
address.setName2("Doe");
address.setStreet("NoStreet");
address.setZip("999999");
address.setCity("NoCity");

user.setAddress(address);

userDAO.doSave(user);
]]>
                </source>

            </subsection>

        </section>

    </body>

</document>