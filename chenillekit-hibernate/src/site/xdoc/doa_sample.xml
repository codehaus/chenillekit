<?xml version="1.0"?>

<!--
  ~ Apache License
  ~ Version 2.0, January 2004
  ~ http://www.apache.org/licenses/
  ~
  ~ Copyright 2008 by chenillekit.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  -->

<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">

<document>

    <properties>
        <title>a big sample how to use DAOs</title>
        <author email="homburgs@gmail.com"/>
    </properties>


    <body>

        <section name="big sample">
            <p>
                i think the simplest way to describe is show it by an example:
            </p>
            <subsection name="your database table 'users'">
                <table>
                    <tr>
                        <th>fieldname</th>
                        <th>type</th>
                        <th>description</th>
                    </tr>
                    <tr>
                        <td>id</td>
                        <td>int</td>
                        <td>primary key</td>
                    </tr>
                    <tr>
                        <td>login_name</td>
                        <td>char(20)</td>
                        <td>users login name</td>
                    </tr>
                    <tr>
                        <td>password</td>
                        <td>char(8)</td>
                        <td>users password</td>
                    </tr>
                </table>

            </subsection>

            <subsection name="your entity for table 'users'">
                <source>
                    <![CDATA[
@Entity
@Table(name = "users")
public class User
{
    private long _id;
    private String _loginName;
    private String _password;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", nullable = false, length = 20)
    public long getId()
    {
        return _id;
    }

    public void setId(long id)
    {
        _id = id;
    }

    @Basic
    @Column(name = "login_name", nullable = false, length = 8, unique = true)
    @Validate("required")
    public String getLoginName()
    {
        return _loginName;
    }

    public void setLoginName(String loginName)
    {
        _loginName = loginName;
    }

    @Basic
    @Column(name = "password", length = 32, nullable = false)
    @Validate("required,minlength=4")
    public String getPassword()
    {
        return _password;
    }

    public void setPassword(String password)
    {
        _password = password;
    }

    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof User)) return false;

        User user = (User) o;

        return _id == user.getId();
    }

    public int hashCode()
    {
        int result;
        result = (int) (_id ^ (_id >>> 32));
        result = 31 * result + (_loginName != null ? _loginName.hashCode() : 0);
        result = 31 * result + (_password != null ? _password.hashCode() : 0);
        return result;
    }

    @Override
    public String toString()
    {
        final StringBuilder sb = new StringBuilder();
        sb.append("User");
        sb.append("{_recId=").append(_id);
        sb.append(", _loginName='").append(_loginName).append('\'');
        sb.append('}');
        return sb.toString();
    }

}
]]>
                </source>

            </subsection>

            <subsection name="your DAO interface for entity User">

                <source>
                    <![CDATA[
public interface UserDAO extends GenericDAO<User, Long>
{
    List<User> findAllOrderedByLoginName();
}
]]>
                </source>

            </subsection>

            <subsection name="your hibernate based implementation for UserDAO">

                <source>
                    <![CDATA[
public class UserDAOHibernate extends AbstractHibernateDAO<User, Long> implements UserDAO
{
    public UserDAOHibernate(Logger logger, Session session)
    {
        super(logger, session);
    }

    public List<User> findAllOrderedByLoginName()
    {
        return findAll("loginName");
    }
}
]]>
                </source>

            </subsection>

            <subsection name="inject the DAO into your application">

                <p>
                    add UserDAOHibernate as service to Tapestry5 IOC and say hibernate, where to find your entities.
                </p>

                <source>
                    <![CDATA[
public static void contributeHibernateEntityPackageManager(Configuration<String> configuration)
{
    configuration.add("your.appl.package.entities");
}

/**
 * bind all used DAOs.
 *
 * @param binder the service binder
 */
public static void bind(ServiceBinder binder)
{
    binder.bind(UserDAO.class, UserDAOHibernate.class);
}
]]>
                </source>

            </subsection>

            <subsection name="accessing the DAO from application code">

                <p>
                    now we are ready to access the user entity by his DAO class.
                </p>

                <source>
                    <![CDATA[
UserDAO userDAO = iocRegistry.getService(UserDAO.class);

User user = new User();
user.setLoginName("username");
user.setPassword("my_secret");
user.setActive(true);

userDAO.doSave(user);
]]>
                </source>

            </subsection>

        </section>

    </body>

</document>