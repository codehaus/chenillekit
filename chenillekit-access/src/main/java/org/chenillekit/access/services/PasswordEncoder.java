/*
 *  Apache License
 *  Version 2.0, January 2004
 *  http://www.apache.org/licenses/
 *
 *  Copyright 2008 by chenillekit.org
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 */

package org.chenillekit.access.services;

/**
 * Interface for performing authentication operations on a password.
 *
 * @author <a href="mailto:homburgs@googlemail.com">shomburg</a>
 * @version $Id$
 */
public interface PasswordEncoder
{
    /**
     * Encodes the specified raw password with an implementation specific algorithm.
     * <p/>
     * This will generally be a one-way message digest such as MD5 or SHA, but may also be a plaintext variant which does no encoding at all,
     * but rather returns the same password it was fed. The latter is useful to plug in when the original password must be stored as-is.
     * <p/>
     * The specified salt will potentially be used by the implementation to "salt" the initial value before encoding. A salt is usually a
     * user-specific value which is added to the password before the digest is computed. This means that computation of digests for
     * common dictionary words will be different than those in the backend store, because the dictionary word digests will not reflect
     * the addition of the salt. If a per-user salt is used (rather than a system-wide salt), it also means users with the same password
     * will have different digest encoded passwords in the backend store.
     * <p/>
     * If a salt value is provided, the same salt value must be use when calling the isPasswordValid(String, String, Object) method.
     * Note that a specific implementation may choose to ignore the salt value (via null), or provide its own.
     *
     * @param rawPass the password to encode
     * @param salt    optionally used by the implementation to "salt" the raw password before encoding. A null value is legal.
     *
     * @return encoded password
     */
    String encodePassword(String rawPass, Object salt);

    /**
     * Validates a specified "raw" password against an encoded password.
     * <p/>
     * The encoded password should have previously been generated by encodePassword(String, Object).
     * This method will encode the rawPass (using the optional salt), and then compared it with the presented encPass.
     * <p/>
     * For a discussion of salts, please refer to encodePassword(String, Object).
     *
     * @param encPass a pre-encoded password
     * @param rawPass a raw password to encode and compare against the pre-encoded password
     * @param salt    optionally used by the implementation to "salt" the raw password before encoding. A null value is legal.
     *
     * @return true if the password is valid , false otherwise
     */
    boolean isPasswordValid(String encPass, String rawPass, Object salt);

}
